<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<templates>
<template name="$a.data.control(name,control)" description="[DataBinding] 새로운 데이터바인드 컨트롤을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.data.control(${name}, {
      editable: true, //change 이벤트 시점에 데이터 편집 여부
      render : function(element, key, value, data, rule) { //rendering할때 호출되는 함수
      },
      data : function(element) { // 엘리먼트로 부터 값 읽어올 때 호출되는 함수
      }
  })
</template>
<template name="$a.keyfilter.addKeyUpRegexpRule(name,rule)" description="[MaskedInput] 새로운 keyfilter 룰을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.keyfilter.addKeyUpRegexpRule(${name}, ${rule})
</template>
<template name="$a.maskedinput(element,format)" description="[MaskedInput] 텍스트 값을 입력 시 특정 format (날짜, 통화, 휴대폰번호, 주민번호 등)의 형태로 쉽게 입력될 수 있도록 해주는 기능을 제공합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.maskedinput(${element},${format})
</template>
<template name="$a.maskedinput(element,format,option)" description="[MaskedInput] 텍스트 값을 입력 시 특정 format (날짜, 통화, 휴대폰번호, 주민번호 등)의 형태로 쉽게 입력될 수 있도록 해주는 기능을 옵션 설정에 따라 제공합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.maskedinput(${element},${format},${option})
</template>
<template name="$a.navigate(url)" description="[Navigation] 특정 화면(url)으로 이동하게합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.navigate(${url})
</template>
<template name="$a.navigate(url,param)" description="[Navigation] 특정 화면(url)으로 이동하며, 파라미터 데이터(param)를 전달합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.navigate(${url}, ${param})
</template>
<template name="$a.navigate(url,param,target)" description="[Navigation] 특정 화면(url)으로 이동하며, 파라미터 데이터(param)를 전달합니다. 이때 화면 이동 대상을 추가로 지정할 수 있습니다. " autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.navigate(${url}, ${param}, '${_blank}')
</template>
<template name="$a.back()" description="[Navigation] 히스토리 스택 상 이전 화면으로 이동합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.back()
</template>
<template name="$a.back(results)" description="[Navigation] $a.back 함수는 히스토리 스택 상 이전 화면으로 이동하며, results 데이터를 전달합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.back(${results})
</template>
<template name="$a.navigate.setup(option)" description="[Navigation] navigate 의 url 파라미터를 동적으로 변경하는 함수를 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.navigate.setup({
      url: function(url, param) {
          return '/www/html/' + url + '.html'
      }
  });
</template>
<template name="$a.page(function)" description="[Page] 화면의 로직을 함수 내에 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.page(function() {
      // 초기화 함수
      this.init = function(id, param) {

      }
  })
</template>
<template name="$a.popup(option)" description="[Popup] 윈도우 팝업, 레이어 팝업 등 다양한 팝업을 호출할 수 있도록 제공합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.popup({
              url: "popup/popup.html" //호출할 페이지 url
            , data: {"item" :"red"} //팝업창에 전달 할 데이터
            , iframe: false   //iframe 사용 여부
            , width : 300     // 넓이 px
            , height : 300    // 높이 px
            , movable:true    // 이동 가능 여부
            , resizable:true  // 리사이즈 여부
            , title : "팝업1" //팝업 타이틀
            , callback : function(data) { // 팝업창을 닫을 때 실행
                  alert("popup closed!");
            }
  })
</template>
<template name="$a.close(data)" description="[Popup] 팝업창을 닫고 메인 윈도우 콜백함수에 데이터를 전달합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.close(${data})
</template>
<template name="$a.popup.setup(option)" description="[Popup] $a.popup 함수에서 공통적으로 사용되는 값을 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.popup.setup({
      width: 1000, // 공통 적용 될 팝업 너비
      height: 500, // 공통 적용 될 팝업 높이
  })
</template>
<template name="$a.request(serviceId,options)" description="[Request] HTTP(Ajax) 통신을 요청하는 함수로 통신 파리미터 자동 생성 및 응답 데이터 자동 바인드 기능을 제공합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.request('${serviceId}', {
      data: {}, // 통신 parameter. GET 방식 통신의 경우, data 설정 하지 않음
      success: function(res) {
          // 통신이 성공적으로 이루어 진 경우 호출되는 콜백함수
      },
      fail: function(res) {
          // 통신은 성공적으로 이루어 졌으나, 서버오류가 발생한 경우 호출되는 콜백함수
      },
      error: function(errObject) {
          // 통신이 실패한 경우 호출되는 콜백함수
      }
  })
</template>
<template name="$a.request.setup(platformName,options)" description="[Request] $a.request 함수에서 공통적으로 사용되는 값을 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.request.setup({
  	  url: function(serviceId, parameters){
  		  return '/services/' + id;
      },
      timeout: 30000,
      before: function(serviceId, option){
          this.requestHeaders["Content-Type"] ="application/json; charset=UTF-8";
      },
      after: function(response){
            if(response.resultCode.indexOf('E') !== -1) { // ex) E1001, E1002, ... (서버에서 임의로 결정됨)
                this.isSuccess = false; // isSuccess false인 경우,  after 다음에 fail callback이 호출 됨
            }
      },
      error: function(errObject){
      	// 통신이 실패한 경우 호출되는 콜백함수
      	var resultMessage = null;
      	if(typeof errObject === 'object'){
      		resultMessage = JSON.stringify(errObject);
      	}else if(typeof errObject === 'string'){
      		resultMessage = errObject;
      	}
      	if(resultMessage) {
         //	call error callback or show error message...
      	}
      }
  });
</template>
<template name="$a.setup(componentName,options)" description="[Setup] AlopexUI 컴포넌트의 공통 옵션을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.setup(${componentName}, ${options})
</template>
<template name="$a.session(key)" description="[Storage] 세션 영역의 데이터를 읽어옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.session(${key})
</template>
<template name="$a.session(key,value)" description="[Storage] 세션 영역에 데이터를 저장합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  $$a.session(${key}, ${value})
</template>
<template name="$a.session.clear()" description="[Storage]세션 영역에 저장된 모든 데이터를 삭제합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 $$a.session.clear()
</template>
<template name="$a.session.clear(key)" description="[Storage] 세션 영역에 저장된 key에 해당하는 데이터만 삭제합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 $$a.session.clear(${key})
</template>
<template name="$a.cookie(key)" description="[Storage] 쿠키 영역의 데이터를 읽어옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 $$a.cookie(${key})
</template>
<template name="$a.cookie(key,value)" description="[Storage] 쿠키 영역에 데이터를 저장합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 $$a.cookie(${key}, ${value})
</template>
<template name="$a.cookie(key,value,expires)" description="[Storage] 쿠키 영역에 데이터를 저장하고, 만료일자를 지정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 $$a.cookie(${key}, ${value}, ${expires})
</template>
<template name="$a.validator.setup(config)" description="[Validator] validator 함수에서 공통적으로 사용되는 값을 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 $$a.validator.setup({
    message: {
         required:  'Required Form Field', //공통 필수 필드 메시지 설정
     }
 })
</template>
<template name="$a.convert(element)" description="[Convert]  전달받은 element를 Alopex UI 객체로 변환합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 $$a.convert(${element})
</template>
<template name=".setData(data)" description="[DataBinding] data-bind 속성이 있는 HTML엘리먼트에 데이터를 바인딩합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .setData(${data})
</template>
<template name=".getData()" description="[DataBinding] data-bind 속성이 있는 HTML엘리먼트의 데이터를 가져옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .getData()
</template>
<template name=".overlay()" description="[Progress] 선택된 영역과 같은 크기의 오버레이를 영역 바로 위에 생성합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .overlay()
</template>
<template name=".overlay(option)" description="[Progress] 선택된 영역과 같은 크기의 오버레이를 영역 바로 위에 설정 값에 따라 생성합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .overlay({
   duration : 300, //오버레이/default progress가 완전히 표시되기까지 걸리는 시간
   durationOff : 500 //오버레이/default progress가 완전히 사라지기까지 걸리는 시간
  })
</template>
<template name=".progress()" description="[Progress] 오버레이를 생성하고, 프로그레스바를 보여주는 함수입니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .progress()
</template>
<template name=".progress(option)" description="[Progress] 오버레이를 설정 값에 따라 생성하고, 프로그레스바를 보여주는 함수입니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .progress({
   duration : 300, //오버레이/default progress가 완전히 표시되기까지 걸리는 시간
   durationOff : 500 //오버레이/default progress가 완전히 사라지기까지 걸리는 시간
  })
</template>
<template name=".validator()" description="[Validator] form/input/select 요소에 valdation 설정하고, 설정을 저장하고 있는 Validation Object를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .validator()
</template>
<template name=".validator(config)" description="[validator] form/input/select 요소에 valdation 을 config 값에 따라 설정하고, 설정을 저장하고 있는 Validation Object를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .validator({
   rule:{required:true, minlength:2} //필수 입력 및 최소 2글자 이상 입력
  })
</template>
<template name=".validate()" description="[Validator] Validator 검증 결과 값을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .validate()
</template>
<template name=".validate(config)" description="[validator] config 값에 따라 설정된 Validator 검증 결과 값을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .validate({
   rule:{required:true, minlength:2} //필수 입력 및 최소 2글자 이상 입력
  })
</template>
<template name=".getErrorMessage()" description="[Validator] 현재 Validator object가 지시하고 있는 target element에 대한 검증을 실시하였을 때, 발생한 오에 대한 오류메시지를 모두 가져옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
 .getErrorMessage()
</template>
<template name="Validator.addMethod(name,handler)" description="[Validator] Validator의 Custom Method를 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  Validator.addMethod('${methodName}', function(element, value, param) {
      //무조건 rule 파라미터로 넘어온 값과 일치해야 검증을 통과시키는 로직.
      if (value === param) {
          return true;
      } else {
          return false;
      }
  )
</template>
<template name="Validator.setMessage(method,message)" description="[Validator] Validation Method 커스텀 메시지를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  Validator.setMessage('${methodName}', '${message}');
</template>
<template name=".expand" description="[Accordion] 해당 항목의 하위 내용을 보여줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .expand(${index})
</template>
<template name=".collapse" description="[Accordion] 해당 항목의 하위 내용을 감춥니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .collapse(${index})
</template>
<template name=".expandAll" description="[Accordion][Tree] 모든 항목의 하위 내용을 보여줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .expandAll()
</template>
<template name=".collapseAll" description="[Accordion][Tree] 모든 항목의 하위 내용을 감춥니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .collapseAll()
</template>
<template name=".expandByMenuId(menuId)" description="[Accordion] 특정 메뉴를 열어줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .expandByMenuId(${menuId})
</template>
<template name=".collapseByMenuId(menuId)" description="[Accordion] 특정 메뉴를 닫아줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .collapseByMenuId(${menuId})
</template>
<template name=".setOptions(options)" description="[Autocomplete] Autocomplete 컴포넌트 옵션을 동적으로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setOptions({
          url : "/words", //데이터를 가져올 url
          method : "get", //ajax 통신의 메소드
          datatype : "json", //버에서 반환되는 데이터 형식
          paramname : "keyword",//파라미터 이름을 설정해야 할 때 사용
          before : function(id, option){ //서버 통신 전처리 함수
             this.data.serviceId = "test"; // 파라미터 추가
          }
      })
</template>
<template name=".getSelectedData()" description="[Autocomplete]  getSelectedData 함수는 선택된 항목의 JSON 데이터를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getSelectedData()
</template>
<template name=".select(target)" description="[Autocomplete][Dropdown] 드랍다운 메뉴를 동적 선택합니다. Autocomplete 인 경우, String 타입의 텍스트로도 사용 가능합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .select(${target})
</template>
<template name=".setEnabled(isEnabled)" description="[Component공통] 컴포넌트의 활성화 여부를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setEnabled(true|false)
</template>
<template name=".setCustomFilter(function)" description="[Autocomplete] 자동 완성 필터링을 위한 커스텀 함수를 등록합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setCustomFilter(function(el, source, text){
      var el = el; // Autocomplete 엘리먼트
      var source = source; // 필터링 대상 JSONArray
      var text = text; // 필터링 키워드
      // 필터링 처리
      return source;
  });
</template>
<template name=".refreshFilter()" description="[Autocomplete] 동적 입력(Textinput)값으로 목록(Dropdown)을 필터링해주는 함수입니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .refreshFilter()
</template>
<template name=".clear()" description="[Component공통] 컴포넌트의 값을 초기화합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .clear()
</template>
<template name=".setChecked(isChecked)" description="[Component공통] 체크 기능이 가능한 컴포넌트의 상태를 동적으로 변경합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setChecked(true|false)
</template>
<template name=".toggleChecked()" description="[Button] 체크 상태를 동적으로 변경합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .toggleChecked()
</template>
<template name=".isChecked()" description="[Button] 체크 여부를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .isChecked()
</template>
<template name=".prevSlide()" description="[Carousel] 이전 Carousel 페이지로 이동합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .prevSlide()
</template>
<template name=".nextSlide()" description="[Carousel] 다음 Carousel 페이지로 이동합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .nextSlide()
</template>
<template name=".setIndex(index)" description="[Carousel] index 로 Carousel 페이지를 동적으로 선택합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setIndex(${index})
</template>
<template name=".stopAutoSlide()" description="[Carousel] 동작하고 있는 autoSlide기능을 중지합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .stopAutoSlide()
</template>
<template name=".startAutoSlide()" description="[Carousel] autoSlide기능을 동작합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .startAutoSlide()
</template>
<template name=".setAutoSlideDuration(duration)" description="[Carousel] autoSlide 동작 시간을 ms(millisecond)단위로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setAutoSlideDuration(${duration})
</template>
<template name=".setSwipe(isSwipe)" description="[Carousel] Carousel 컴포넌트의 swipe 기능의 사용 여부를 설정 합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setSwipe(true|false)
</template>
<template name=".setCheckedAll(isChecked)" description="[CheckBox] 체크박스 마크업 속성 중 name이 동일한 모든 체크박스의 전체 체크/전체 체크해제 상태를 제어할 때 사용합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setCheckedAll(true|false)
</template>
<template name=".setValues(values)" description="[Component공통] 엘리먼트의 값을 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setValues(${values})
</template>

<template name=".toggle()" description="[Component공통] toggle 기능이 가능한 컴포넌트를 toggle합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .toggle()
</template>
<template name=".getValues()" description="[CheckBox] 선택된 체크박스의 value 값을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getValues()
</template>
<template name=".getTexts()" description="[CheckBox] 선택된 텍스트 값을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getTexts()
</template>
<template name=".update(options)" description="[DatePicker] DatePicker 컴포넌트의 옵션을 동적으로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .update({ //월별 선택 달력 설정
    pickertype: 'monthly',
    selectyear: false,
    selectmonth: false
  });
</template>
<template name=".showDatePicker(callback)" description="[DatePicker] DatePicker 컴포넌트의 열어줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .showDatePicker(function(date, dateStr){
          $("#inputID").val(dateStr); // 특정 input 요소에 값 설정
  })
</template>
<template name=".showDatePicker(callback,option)" description="[DatePicker] DatePicker 컴포넌트를 설정 옵션 값에 따라 열어줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .showDatePicker(function(date, dateStr){
        $("#inputID").val(dateStr); // 특정 input 요소에 값 설정
      }, {
        selectyear: true, // 년도 선택 표시
        selectmonth: true // 월 선택 표시
  })
</template>
<template name=".closeDatePicker()" description="[DatePicker] DatePicker 컴포넌트를 동적으로 닫아줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .closeDatePicker()
</template>
<template name=".open()" description="[Dialog] Dialog 컴포넌트를 열어줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .open()
</template>
<template name=".open(option)" description="[Dialog] Dialog 컴포넌트를 설절 옵션 값에 따라 열어줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .open({
          title:"Dialog", //다이얼로그의 제목 문자열
          left: 100, //다이얼로그 위치값
          top:100, //다이얼로그 위치값
          width:270, //다이얼로그의 넓이값
          height:270, //다이얼로그의 높이값
          type: "blank", //다이얼로그 타입설정
          resizable:true, //다이얼로그 크기조절 가능유무 설정
          movable:true, //다이얼로그 위치조정 가능유무 설정
          animation: "fade", //다이얼로그 종료시 적용되는 애니메이션 설정
          animationtime: 300 //애니메이션 동작 시간 설정
  })
</template>
<template name=".closed(callback)" description="[Dialog] Close 버튼을 눌렀을 때의 callback을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .closed(function() {
      alert("CLOSE pressed!");
    })
</template>
<template name=".ok(callback)" description="[Dialog] OK 버튼을 눌렀을 때의 callback을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .ok(function() {
      alert("OK pressed!");
  })
</template>
<template name=".cancel(callback)" description="[Dialog] Cancel 버튼을 눌렀을 때의 callback을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .cancel(function() {
      alert("CANCEL pressed!");
  })
</template>
<template name=".confirm(callback)" description="[Dialog] Confirm 버튼을 눌렀을 때의 callback을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .confirm(function() {
      alert("CONFIRM pressed!");
  })
</template>
<template name=".close()" description="[Component공통] 컴포넌트를 닫아줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .close()
</template>
<template name=".close(callback)" description="[Component공통] 컴포넌트를 닫았을 때의 callback을 정의합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .close(function() {
    ${...}
  })
</template>
<template name=".addHandler(callback)" description="[Dropdown] 드랍다운 메뉴의 옵션이 선택될 때의 콜백함수를 등록합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addHandler(function(e){
      ${...}
  })
</template>
<template name=".setDataSource(data)" description="[Dropdown] 컴포넌트의 데이터를 지정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setDataSource(${data})
</template>
<template name=".getDataSource()" description="[Dropdown] setDataSource API를 통해 데이터를 지정한 경우에 대하여, 해당 데이터를 가져옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getDataSource()
</template>
<template name=".setText(text)" description="[DropdownButton] 드랍다운버튼의 텍스트를 동적으로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setText(${text})
</template>
<template name=".getText()" description="[Component공통] 선택된 텍스트를 동적으로 가져옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getText()
</template>
<template name=".setOptions(options)" description="[FileUpload] 컴포넌트 옵션을 동적으로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setOptions({
          url : '서버URL',
          fileName : 'uploadFiles',
          showFileCounter : true,
          onSelect : function(files)
          {
            var fileInfo = files[0].name+" ("+files[0].size+"Byte)";
             alert(fileInfo);
            // return false; / 리턴 값이 false 일 경우, 선택 취소
          },
          onSubmit : function(files)
          {
            alert(files);
           // return false; // 리턴 값이 false 일 경우, 전송 중단
          },
          onError : function(files,status,errMsg,pd)
          {
             var errorInfo = files+" / "+status+" / "+errMsg;
             alert(errorInfo);
          },
          onCancel : function(files,pd)
          {
             var cancelInfo = "Cancel File : "+files;
             alert(cancelInfo);
          }
  })
</template>
<template name=".startUpload()" description="[FileUpload] 파일 업로드를 시작합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .startUpload()
</template>
<template name=".stopUpload()" description="[FileUpload] 파일 업로드를 중단합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .stopUpload()
</template>
<template name=".cancelAll()" description="[FileUpload] 파일 업로드를 업로드할 파일 목록을 전부 취소(삭제)합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .cancelAll()
</template>
<template name=".getFileCount()" description="[FileUpload] 업로드 할 파일의 목록의 수를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getFileCount()
</template>
<template name=".removeElement()" description="[FileUpload] 파일업로드 컴포넌트를 삭제합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .removeElement()
</template>
<template name=".getResponses()" description="[FileUpload] 서버로부터 받은 응답데이터를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getResponses()
</template>
<template name=".setOrient(orient)" description="[GroupButton] 그룹 버튼의 정렬 방향을 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setOrient('${horizontal}'|'${vertical}')
</template>
<template name=".refresh()" description="[Component공통] 동적으로 데이터 또는 element 를 변경한 후 컴포넌트를 갱신합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .refresh()
</template>
<template name=".multiselect(callback)" description="[MultiSelect] MultiSelect 컴포넌트의 이벤트 핸들러를 등록합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .multiselect({
          beforeopen: function(){
              //멀티셀렉트 표시 직전 이벤트
          },
          open: function(){
              //멀티셀렉트 표시 시 이벤트
          },
          beforeclose: function(){
              //닫기 직전 이벤트
          },
          close: function(){
              //닫기 시 이벤트
          },
          checkAll: function(){
              //전체선택 시 이벤트
          },
          uncheckAll: function(){
              //전체선택해제 시 이벤트
          },
          click: function(){
              //체크박스 선택 시 이벤트
          }
  });
</template>
<template name=".setSelectedPage(pagenum)" description="[Paging] 페이지를 동적으로 선택합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setSelectedPage(${pagenum})
</template>
<template name=".setTotalPage(pagenum)" description="[Paging] 전체 페이지 수를 동적으로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setTotalPage(${pagenum})
</template>
<template name=".setMaxPage(pagenum)" description="[Paging] 화면에 보여지는 페이지 수를 동적으로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setMaxPage(${pagenum})
</template>
<template name=".getSelectedPage()" description="[Paging] 선택된 페이지 넘버를 가져옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getSelectedPage()
</template>
<template name=".getValue()" description="[ProgressBar] 진행된 프로그래스바의 백분율 값을 가져옵니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getValue()
</template>
<template name=".setSelected()" description="[Radio] 셀렉트 상태를 제어합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setSelected()
</template>
<template name=".setSelectSize(size)" description="[Select] Select 컴포넌트의 보여지는 옵션 갯수를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setSelectSize(${size})
</template>
<template name=".selectionInitialization()" description="[Select] Select 컴포넌트의 첫번째 옵션을 선택합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .selectionInitialization(})
</template>
<template name=".split()" description="[Splitter] 동적으로 화면을 split 할 경우 사용합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .split()
</template>
<template name=".split(options)" description="[Splitter] 화면을 옵션 설장 값에 따라 split 할 경우 사용합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .split({
      orientation: 'horizontal', //가로 또는 세로 방향 분할 설정
      limit: 10, //여백 값
      position: '50%' //비율
  })
</template>
<template name=".setOptions(options)" description="[Splitter] Splitter 컴포넌트 옵션을 동적으로 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setOptions({
          orientation: 'horizontal', //가로 또는 세로 방향 분할 설정
          limit: 10, //여백 값
          position: '50%', //비율
          onDrag: function(event) { // 드래그 시점의 콜백 함수를 정의
            console.log("Dragging");
          },
          onDragStart: function(event) { // 드래그 시작 시점의 콜백 함수를 정의
            console.log("Drag Start");
          },
          onDragEnd: function(event) { // 드래그 종료(Drop) 시점의 콜백 함수를 정의
            console.log("Drag End");
            console.log("Position",splitter.getPosition());
          }
      })
</template>
<template name=".hideColumn(index)" description="[Table] index를 이용해 해당 컬럼을 숨깁니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .hideColumn(${index})
</template>
<template name=".showColumn(index)" description="[Table] index를 이용해 숨겨져있던 컬럼을 보여줍니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .showColumn(${index})
</template>
<template name=".sortTable(header,orderBy)" description="[Table] header를 기준으로 옵션에 따라 정렬합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .sortTable(${header}, ${orderBy})
</template>
<template name=".addTab(title,contentKey)" description="[Tab] 컨텐츠를 통해서 탭을 추가합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${title}, ${contentKey})
</template>
<template name=".addTab(title,contentKey,setFocus)" description="[Tab] 컨텐츠를 통해서 탭을 추가하고 추가할 Tab 의 포커스 여부를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${title},${contentKey},true|false)
</template>
<template name=".addTab(title,contentKey,setFocus,index)" description="[Tab] 컨텐츠를 통해서 탭을 추가하고 추가할 Tab 의 포커스 여부와 추가될 tab 인덱스를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${title},${contentKey},true|false,${index})
</template>
<template name=".addTab(title,contentKey,depth2info)" description="[Tab] 컨텐츠를 통해서 2뎁스 탭을 추가합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${title}, ${contentKey},${index})
</template>
<template name=".addTab(title,contentKey,depth2info,setFocus)" description="[Tab] 컨텐츠를 통해서 2뎁스 탭을 추가하고 추가할 Tab 의 포커스 여부를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${title},${contentKey},${index},true|false)
</template>
<template name=".addTab(title,contentKey,depth2info,setFocus,index)" description="[Tab] 컨텐츠를 통해서 2뎁스 탭을 추가하고 추가할 Tab 의 포커스 여부와 추가될 tab 인덱스를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${title},${contentKey},${index},true|false,${index})
</template>
<template name=".addTab(html)" description="[Tab] html 태그를 이용하여 탭을 추가합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${html})
</template>
<template name=".addTab(html,setFocus)" description="[Tab] html 태그를 이용하여 탭을 추가하고, 추가할 Tab 의 포커스 여부를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .addTab(${html},true|false)
</template>
<template name=".moveTab(targetIndex,moveToIndex)" description="[Tab] 해당 인덱스의 탭을 특정 인덱스로 이동합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .moveTab(${targetIndex},${moveToIndex})
</template>
<template name=".removeTab(index1)" description="[Tab] 해당 인덱스의 탭(1뎁스)을 제거합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .removeTab(${index1})
</template>
<template name=".removeTab(index1,index2)" description="[Tab] 해당 인덱스의 탭(2뎁스)을 제거합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .removeTab(${index1}, ${index2})
</template>
<template name=".setTabIndex(index)" description="[Tab] 해당 인덱스의 탭을 선택합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setTabIndex(${index})
</template>
<template name=".setTabIndex(index,setFocus)" description="[Tab] 해당 인덱스의 탭을 선택하고, 포커스 여부를 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setTabIndex(${index},true|false)
</template>
<template name=".reload(index)" description="[Tab] 해당 인덱스의 탭 컨텐츠가 iframe 일 경우, ifrmae 을 새로고침 합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .reload(${index})
</template>
<template name=".setTabWidth(width)" description="[Tab] Fixed 탭의 탭 버튼 고정 너비를 동적 설정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setTabWidth(${width})
</template>
<template name=".setDraggable(isDraggable)" description="[Tab] 다른 탭으로 이동되기 이전에 호출되는 함수를 등록합니다. false로 리턴하면 다른 탭으로의 이동을 막을 수 있습니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setDraggable(true|false)
</template>
<template name=".setBeforeunload(index,handler)" description="[Tab] 다른 탭으로 이동되기 이전에 호출되는 함수를 등록합니다. false로 리턴하면 다른 탭으로의 이동을 막을 수 있습니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setBeforeunload(${index}, function(){
      return false; // 두번 째 탭 이동 중지
  })
</template>
<template name=".setTabByContent(content)" description="[Tab] data-content 의 값을 가진 탭을 선택합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .setTabByContent(${content})
</template>
<template name=".getCurrentTabIndex()" description="[Tab] 현재 선택된 탭의 인덱스 값을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getCurrentTabIndex()
</template>
<template name=".getTabContentByIndex(index1)" description="[Tab] 인덱스에 해당하는 1뎁스 탭의 컨텐츠 element를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getTabContentByIndex(${index1})
</template>
<template name=".getTabContentByIndex(index1,index2)" description="[Tab] 인덱스에 해당하는 2뎁스 탭의 컨텐츠 element를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getTabContentByIndex(${index1}, ${index2})
</template>
<template name=".getCurrentTabContent()" description="[Tab] 현재 선택된 탭의 data-content 값을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getCurrentTabContent()
</template>
<template name=".getLength()" description="[Tab] 현재 탭의 length 값을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getLength()
</template>
<template name=".getTitleByIndex(index1)" description="[Tab] 1뎁스 탭 인덱스 정보를 통해 탭 제목을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getTitleByIndex(${index1})
</template>
<template name=".getTitleByIndex(index1,index2)" description="[Tab] 2뎁스 탭 인덱스 정보를 통해 탭 제목을 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getTitleByIndex(${index1}, ${index2})
</template>
<template name=".cancelThisTabChange()" description="[Tab] beforetabchange 이벤트에서 탭 변경을 제한합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .cancelThisTabChange()
</template>
<template name=".isEnabled(index1)" description="[Tab] 해당 인덱스의 1뎁스 탭 활성화 여부를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .isEnabled(${index1})
</template>
<template name=".isEnabled(index1,index2)" description="[Tab] 해당 인덱스의 2뎁스 탭 활성화 여부를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .isEnabled({index1}, ${index2})
</template>
<template name=".getNode(text,type)" description="[Tree] Tree 컴포넌트의 Node Object를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getNode(${text}, '${id}'|'${text}')
</template>
<template name=".getObject(text,type)" description="[Tree] Tree 컴포넌트의 li 엘리먼트를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getObject(${text}, '${id}'|'${text}')
</template>
<template name=".getSelectedNode()" description="[Tree] Tree 컴포넌트의 현재 선택된 Node Object를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getSelectedNode()
</template>
<template name=".expand(nodeObj)" description="[Tree] 선택된 트리 노드가 자식 노드를 가지고 있을 경우 expand 합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .expand(${nodeObj})
</template>
<template name=".collapse(nodeObj)" description="[Tree] 선택된 트리 노드가 자식을 가지고 있을 경우 collapse 합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .collapse(${nodeObj})
</template>
<template name=".toggleExpand(nodeObj)" description="[Tree] 선택된 노드가 자식을 가지고 있는 경우 collapse/expand를 toggle 합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .toggleExpand(${nodeObj})
</template>
<template name=".createNode(parent,data)" description="[Tree] Tree 컴포넌트 내 새로운 노드를 생성합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .createNode(${nodeObj}, {
      text: 'node1', // 표시될 text
      id: '1' // 노드 id
  })
</template>
<template name=".editNode(parent,data)" description="[Tree] 주어진 트리 노드의 정보를 수정합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .editNode(${nodeObj}, {
      text: 'node1', // 표시될 text
      id: '1' // 노드 id
  })
</template>
<template name=".deleteNode(node)" description="[Tree] 주어진 트리 노드를 삭제합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .deleteNode(${nodeObj})
</template>
<template name=".showCheckbox()" description="[Tree] 트리의 체크박스를 활성화합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .showCheckbox()
</template>
<template name=".hideCheckbox()" description="[Tree] 트리의 체크박스를 비활성화합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .hideCheckbox()
</template>
<template name=".toggleCheckbox()" description="[Tree] 트리의 체크박스 show/hide 상태를 Toggle합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .toggleCheckbox()
</template>
<template name=".getCheckedNodes()" description="[Tree] Tree 컴포넌트의 체크된 노드를 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getCheckedNodes()
</template>
<template name=".getCheckedNodes(options)" description="[Tree] Tree 컴포넌트의 체크된 노드를 옵션 설정 값에 따라 리턴합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .getCheckedNodes({indeterminate:true})
</template>
<template name=".traverseUpCheck(element)" description="[Tree] 동적으로 checked 처리된 경우, 상위 체크박스의 checked 및 indeterminate를 처리합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .traverseUpCheck(${element})
</template>
<template name=".webeditor()" description="[WebEditor] WebEditor 컴포넌트사용을 선언합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .webeditor()
</template>
<template name=".webeditor(options)" description="[WebEditor] WebEditor 컴포넌트의 설정을 변경하여 사용합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .webeditor({
    height: 200,                 // set editor height
    minHeight: null,             // set minimum height of editor
    maxHeight: null,             // set maximum height of editor,

  });
</template>
<template name=".webeditor('insertNode',node)" description="[WebEditor] 에디터에 tag node를 생성합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .webeditor('insertNode', ${node})
</template>
<template name=".webeditor('createLink',linkInfo)" description="[WebEditor] 에디터에 link를 생성합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .webeditor('createLink', ${linkInfo})
</template>
<template name=".webeditor('insertImage',url)" description="[WebEditor] 에디터에 이미지를 추가합니다." autoinsert="false" context="javaScript" deleted="false" enabled="true">
  .webeditor('insertImage', ${url})
</template>
</templates>
